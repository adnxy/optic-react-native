{"version":3,"sources":["../src/metrics/startup.ts"],"sourcesContent":["export {};\n\nimport { useMetricsStore } from '../store/metricsStore';\n\n// Global app start time (should be set as early as possible in the app entrypoint)\ndeclare global {\n  var __OPTIC_APP_START_TIME__: number | undefined;\n  var __OPTIC_STARTUP_CAPTURED__: boolean;\n}\n\nif (global.__OPTIC_APP_START_TIME__ === undefined) {\n  global.__OPTIC_APP_START_TIME__ = Date.now();\n}\n\nif (global.__OPTIC_STARTUP_CAPTURED__ === undefined) {\n  global.__OPTIC_STARTUP_CAPTURED__ = false;\n}\n\n/**\n * Measures time since global app start and logs it to the console.\n * Only measures once and stores the result.\n */\nexport function trackStartupTime() {\n  // Only measure startup time once\n  if (global.__OPTIC_STARTUP_CAPTURED__) {\n    return;\n  }\n\n  const start = global.__OPTIC_APP_START_TIME__ || Date.now();\n  \n  // Use requestAnimationFrame to ensure we measure after initial render\n  requestAnimationFrame(() => {\n    if (!global.__OPTIC_STARTUP_CAPTURED__) {\n      const duration = Date.now() - start;\n      \n      // Mark as captured before setting the time to prevent race conditions\n      global.__OPTIC_STARTUP_CAPTURED__ = true;\n      \n      useMetricsStore.getState().setStartupTime(duration);\n      console.log(`[useoptic] Startup time: ${duration}ms`);\n    }\n  });\n}\n"],"mappings":";;;;;AAUA,IAAI,OAAO,6BAA6B,QAAW;AACjD,SAAO,2BAA2B,KAAK,IAAI;AAC7C;AAEA,IAAI,OAAO,+BAA+B,QAAW;AACnD,SAAO,6BAA6B;AACtC;AAMO,SAAS,mBAAmB;AAEjC,MAAI,OAAO,4BAA4B;AACrC;AAAA,EACF;AAEA,QAAM,QAAQ,OAAO,4BAA4B,KAAK,IAAI;AAG1D,wBAAsB,MAAM;AAC1B,QAAI,CAAC,OAAO,4BAA4B;AACtC,YAAM,WAAW,KAAK,IAAI,IAAI;AAG9B,aAAO,6BAA6B;AAEpC,sBAAgB,SAAS,EAAE,eAAe,QAAQ;AAClD,cAAQ,IAAI,4BAA4B,QAAQ,IAAI;AAAA,IACtD;AAAA,EACF,CAAC;AACH;","names":[]}