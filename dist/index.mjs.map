{"version":3,"sources":["../src/metrics/globalRenderTracking.ts","../src/store/metricsStore.ts","../src/metrics/network.ts","../src/metrics/startup.ts","../src/metrics/fps.ts","../src/core/initOptic.ts","../src/overlay/Overlay.tsx","../src/metrics/reRenders.ts","../src/metrics/screen.ts"],"sourcesContent":["import * as React from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\n\ndeclare global {\n  var __OPTIC_ROOT_COMPONENT__: React.ComponentType<any> | undefined;\n  var __OPTIC_RENDER_TRACKING_ENABLED__: boolean;\n}\n\n// Store to keep track of component renders\nconst renderCounts: Record<string, number> = {};\n\n// Create a wrapper component that tracks renders\nconst withRenderTracking = (WrappedComponent: React.ComponentType<any>) => {\n  const RenderTrackingWrapper: React.FC<any> = (props) => {\n    const componentName = WrappedComponent.displayName || WrappedComponent.name || 'Unknown';\n    const incrementReRender = useMetricsStore((state) => state.incrementReRender);\n    \n    React.useEffect(() => {\n      if (global.__OPTIC_RENDER_TRACKING_ENABLED__) {\n        incrementReRender(componentName);\n        renderCounts[componentName] = (renderCounts[componentName] || 0) + 1;\n      }\n    });\n\n    return React.createElement(WrappedComponent, props);\n  };\n\n  return RenderTrackingWrapper;\n};\n\n// Function to wrap any component with render tracking\nexport function wrapWithRenderTracking<T extends React.ComponentType<any>>(\n  component: T\n): T {\n  if (!component) return component;\n  \n  // Skip if already wrapped\n  if ((component as any).__OPTIC_WRAPPED__) return component;\n  \n  const wrapped = withRenderTracking(component);\n  (wrapped as any).__OPTIC_WRAPPED__ = true;\n  return wrapped as T;\n}\n\n// Function to enable/disable render tracking\nexport function setRenderTrackingEnabled(enabled: boolean) {\n  global.__OPTIC_RENDER_TRACKING_ENABLED__ = enabled;\n  console.log(`[useoptic] Render tracking ${enabled ? 'enabled' : 'disabled'}`);\n}\n\n// Function to wrap the root component\nexport function setupGlobalRenderTracking() {\n  // Get the root component\n  const rootComponent = global.__OPTIC_ROOT_COMPONENT__;\n  if (!rootComponent) {\n    console.warn('[useoptic] Root component not found. Make sure to set global.__OPTIC_ROOT_COMPONENT__ before calling setupGlobalRenderTracking');\n    return;\n  }\n\n  // Wrap the root component with render tracking\n  const wrappedRoot = wrapWithRenderTracking(rootComponent);\n  global.__OPTIC_ROOT_COMPONENT__ = wrappedRoot;\n  \n  console.log('[useoptic] Global render tracking enabled');\n}\n\n// Function to set the root component\nexport function setRootComponent(component: React.ComponentType<any>) {\n  if (!component) return;\n  \n  console.log('[useoptic] Setting root component:', component.name || 'Unknown');\n  global.__OPTIC_ROOT_COMPONENT__ = component;\n  \n  // If render tracking is enabled, wrap the component\n  if (global.__OPTIC_RENDER_TRACKING_ENABLED__) {\n    setupGlobalRenderTracking();\n  }\n}\n\n// Initialize render tracking\nexport function initRenderTracking() {\n  // Set initial state\n  global.__OPTIC_RENDER_TRACKING_ENABLED__ = true;\n  \n  // Wrap the root component if it exists\n  if (global.__OPTIC_ROOT_COMPONENT__) {\n    setupGlobalRenderTracking();\n  }\n  \n  console.log('[useoptic] Render tracking initialized');\n} ","import { create } from 'zustand';\nimport { InitOpticOptions } from '../core/initOptic';\n\nexport interface NetworkRequest {\n  url: string;\n  method: string;\n  duration: number;\n  status: number;\n  [key: string]: any; // for any extra fields\n}\n\nexport interface ScreenMetrics {\n  tti: number | null;\n  reRenderCounts: Record<string, number>;\n}\n\nexport interface MetricsState {\n  currentScreen: string | null;\n  screens: Record<string, {\n    tti: number | null;\n    reRenderCounts: Record<string, number>;\n  }>;\n  startupTime: number | null;\n  fps: number | null;\n  networkRequests: Array<{\n    url: string;\n    method: string;\n    duration: number;\n    status: number;\n  }>;\n  setCurrentScreen: (screenName: string | null) => void;\n  setTTI: (screenName: string, tti: number | null) => void;\n  incrementReRender: (componentName: string) => void;\n  setStartupTime: (time: number) => void;\n  setFPS: (fps: number) => void;\n  addNetworkRequest: (request: {\n    url: string;\n    method: string;\n    duration: number;\n    status: number;\n  }) => void;\n}\n\nexport const useMetricsStore = create<MetricsState>((set, get) => ({\n  currentScreen: null,\n  screens: {},\n  startupTime: null,\n  fps: null,\n  networkRequests: [],\n\n  setCurrentScreen: (screenName) => {\n    set((state) => {\n      // Initialize screen metrics if they don't exist\n      if (screenName && !state.screens[screenName]) {\n        return {\n          currentScreen: screenName,\n          screens: {\n            ...state.screens,\n            [screenName]: {\n              tti: null,\n              reRenderCounts: {},\n            },\n          },\n        };\n      }\n      return { currentScreen: screenName };\n    });\n  },\n\n  setTTI: (screenName, tti) => {\n    set((state) => ({\n      screens: {\n        ...state.screens,\n        [screenName]: {\n          ...state.screens[screenName],\n          tti,\n        },\n      },\n    }));\n  },\n\n  incrementReRender: (componentName) => {\n    const state = get();\n    if (!state.currentScreen) return;\n    \n    const currentScreen = state.screens[state.currentScreen];\n    const currentCount = currentScreen.reRenderCounts[componentName] || 0;\n    \n    set((state) => ({\n      screens: {\n        ...state.screens,\n        [state.currentScreen!]: {\n          ...currentScreen,\n          reRenderCounts: {\n            ...currentScreen.reRenderCounts,\n            [componentName]: currentCount + 1,\n          },\n        },\n      },\n    }));\n  },\n\n  setStartupTime: (time) => {\n    set({ startupTime: time });\n  },\n\n  setFPS: (fps) => {\n    set({ fps });\n  },\n\n  addNetworkRequest: (request) => {\n    set((state) => ({\n      networkRequests: [...state.networkRequests, request].slice(-50), // Keep last 50 requests\n    }));\n  },\n}));\n\nexport let opticEnabled = true;\n\nexport function setOpticEnabled(value: boolean) {\n  opticEnabled = value;\n}\n\nexport function initOptic(options: InitOpticOptions = {}) {\n  const { enabled = true, onMetricsLogged } = options;\n  opticEnabled = enabled;\n  if (!enabled) {\n    return;\n  }\n  // ...rest of your logic...\n}","import { useMetricsStore } from '../store/metricsStore';\n\n// Network performance thresholds (in milliseconds)\nconst NETWORK_THRESHOLDS = {\n  GOOD: 200,\n  WARNING: 500,\n  CRITICAL: 1000,\n};\n\nlet originalFetch: typeof fetch | null = null;\n\nexport const initNetworkTracking = () => {\n  if (originalFetch !== null) return; // Already initialized\n\n  originalFetch = global.fetch;\n  global.fetch = async function (input: RequestInfo | URL, init?: RequestInit) {\n    const startTime = performance.now();\n    const url = input instanceof Request ? input.url : input.toString();\n    const method = input instanceof Request ? input.method : (init?.method || 'GET');\n\n    console.log(`[useoptic] Network request started: ${method} ${url}`);\n\n    try {\n      const response = await originalFetch!(input, init);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      const request = {\n        url,\n        method,\n        duration,\n        status: response.status,\n      };\n\n      console.log(`[useoptic] Network request completed: ${method} ${url} - ${Math.round(duration)}ms (${response.status})`);\n      useMetricsStore.getState().addNetworkRequest(request);\n\n      return response;\n    } catch (error) {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      const request = {\n        url,\n        method,\n        duration,\n        status: 0, // Error status\n      };\n\n      console.log(`[useoptic] Network request failed: ${method} ${url} - ${Math.round(duration)}ms`);\n      useMetricsStore.getState().addNetworkRequest(request);\n\n      throw error;\n    }\n  };\n  console.log('[useoptic] Network tracking started');\n};\n\nexport const stopNetworkTracking = () => {\n  if (originalFetch === null) return;\n\n  global.fetch = originalFetch;\n  originalFetch = null;\n  console.log('[useoptic] Network tracking stopped');\n};\n\nexport const getNetworkColor = (duration: number | null | undefined): string => {\n  if (duration === null || duration === undefined) return '#666666';\n  if (duration <= NETWORK_THRESHOLDS.GOOD) return '#4CAF50';\n  if (duration <= NETWORK_THRESHOLDS.WARNING) return '#FFC107';\n  return '#F44336';\n}; ","export {};\n\nimport { useMetricsStore } from '../store/metricsStore';\n\n// Global app start time (should be set as early as possible in the app entrypoint)\ndeclare global {\n  var __OPTIC_APP_START_TIME__: number | undefined;\n  var __OPTIC_STARTUP_CAPTURED__: boolean;\n}\n\nif (global.__OPTIC_APP_START_TIME__ === undefined) {\n  global.__OPTIC_APP_START_TIME__ = Date.now();\n}\n\nif (global.__OPTIC_STARTUP_CAPTURED__ === undefined) {\n  global.__OPTIC_STARTUP_CAPTURED__ = false;\n}\n\n/**\n * Measures time since global app start and logs it to the console.\n * Only measures once and stores the result.\n */\nexport function trackStartupTime() {\n  // Only measure startup time once\n  if (global.__OPTIC_STARTUP_CAPTURED__) {\n    return;\n  }\n\n  const start = global.__OPTIC_APP_START_TIME__ || Date.now();\n  \n  // Use requestAnimationFrame to ensure we measure after initial render\n  requestAnimationFrame(() => {\n    if (!global.__OPTIC_STARTUP_CAPTURED__) {\n      const duration = Date.now() - start;\n      \n      // Mark as captured before setting the time to prevent race conditions\n      global.__OPTIC_STARTUP_CAPTURED__ = true;\n      \n      useMetricsStore.getState().setStartupTime(duration);\n    }\n  });\n}\n","import { useMetricsStore } from '../store/metricsStore';\n\nlet frameCount = 0;\nlet lastTime = performance.now();\nlet animationFrameId: number | null = null;\n\nconst FPS_THRESHOLDS = {\n  good: 60,\n  warning: 55,\n};\n\nexport function startFPSTracking() {\n  if (animationFrameId !== null) {\n    return; // Already tracking\n  }\n\n  function measureFPS() {\n    const currentTime = performance.now();\n    const elapsed = currentTime - lastTime;\n    \n    if (elapsed >= 1000) { // Calculate FPS every second\n      const fps = Math.round((frameCount * 1000) / elapsed);\n      useMetricsStore.getState().setFPS(fps);\n      \n      // Reset counters\n      frameCount = 0;\n      lastTime = currentTime;\n    }\n    \n    frameCount++;\n    animationFrameId = requestAnimationFrame(measureFPS);\n  }\n\n  animationFrameId = requestAnimationFrame(measureFPS);\n}\n\nexport function stopFPSTracking() {\n  if (animationFrameId !== null) {\n    cancelAnimationFrame(animationFrameId);\n    animationFrameId = null;\n  }\n}\n\nexport function getFPSColor(fps: number | null): string {\n  if (fps === null) return '#fff';\n  if (fps >= FPS_THRESHOLDS.good) return '#4CAF50'; // Green\n  if (fps >= FPS_THRESHOLDS.warning) return '#FFC107'; // Yellow\n  return '#F44336'; // Red\n} ","import { initRenderTracking, setRootComponent } from '../metrics/globalRenderTracking';\nimport { initNetworkTracking } from '../metrics/network';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { trackStartupTime } from '../metrics/startup';\nimport { startFPSTracking } from '../metrics/fps';\nimport type { MetricsState } from '../store/metricsStore';\nimport { setOpticEnabled } from '../store/metricsStore';\nimport React from 'react';\n\nexport interface InitOpticOptions {\n  rootComponent?: React.ComponentType<any>;\n  reRenders?: boolean;\n  network?: boolean;\n  tti?: boolean;\n  startup?: boolean;\n  fps?: boolean;\n  enabled?: boolean;\n  onMetricsLogged?: (metrics: MetricsState) => void;\n}\n\n// Create a wrapper component that automatically tracks screen names\nfunction withScreenTracking<P extends object>(WrappedComponent: React.ComponentType<P>) {\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || 'Unknown';\n  const screenName = displayName.replace(/Screen$/, '');\n\n  function WithScreenTracking(props: P) {\n    const setCurrentScreen = useMetricsStore((state) => state.setCurrentScreen);\n    \n    React.useEffect(() => {\n      console.log(`[useoptic] Setting current screen to \"${screenName}\"`);\n      setCurrentScreen(screenName);\n      return () => setCurrentScreen(null);\n    }, [setCurrentScreen]);\n\n    return React.createElement(WrappedComponent, props);\n  }\n\n  WithScreenTracking.displayName = `WithScreenTracking(${displayName})`;\n  return WithScreenTracking;\n}\n\n// Function to check if a component is likely a screen\nfunction isScreenComponent(component: any): boolean {\n  const name = component.displayName || component.name || '';\n  return name.endsWith('Screen') || name.endsWith('Page') || name.endsWith('View');\n}\n\n// Store to keep track of wrapped components\nconst wrappedComponents = new WeakMap();\n\n// Function to wrap a component if it's a screen\nfunction wrapIfScreen<P extends object>(Component: React.ComponentType<P>): React.ComponentType<P> {\n  if (!isScreenComponent(Component)) {\n    return Component;\n  }\n\n  // Check if already wrapped\n  if (wrappedComponents.has(Component)) {\n    return wrappedComponents.get(Component);\n  }\n\n  // Wrap the component\n  const wrapped = withScreenTracking(Component);\n  wrappedComponents.set(Component, wrapped);\n  return wrapped;\n}\n\nexport function initOptic(options: InitOpticOptions = {}) {\n  const { enabled = true, onMetricsLogged } = options;\n  setOpticEnabled(enabled);\n  if (!enabled) {\n    // Do not initialize anything if disabled\n    return;\n  }\n  const { \n    rootComponent, \n    reRenders = false, \n    network = false,\n    tti = true,\n    startup = true,\n    fps = true\n  } = options;\n\n  // Set the root component if provided\n  if (rootComponent) {\n    const wrappedRoot = wrapIfScreen(rootComponent);\n    setRootComponent(wrappedRoot);\n  }\n\n  // Initialize render tracking if enabled\n  if (reRenders) {\n    initRenderTracking();\n  }\n\n  // Initialize network tracking if enabled\n  if (network) {\n    initNetworkTracking();\n  }\n\n  // Track startup time if enabled\n  if (startup) {\n    trackStartupTime();\n  }\n\n  // Start FPS tracking if enabled\n  if (fps) {\n    startFPSTracking();\n  }\n\n  // Initialize metrics store\n  useMetricsStore.getState();\n\n  // Subscribe to metrics changes and call the callback\n  if (onMetricsLogged) {\n    const unsubscribe = useMetricsStore.subscribe((metrics) => {\n      onMetricsLogged(metrics);\n    });\n    // Optionally return unsubscribe so the user can clean up\n    return {\n      rootComponent,\n      reRenders,\n      network,\n      tti,\n      startup,\n      fps,\n      unsubscribe,\n    };\n  }\n\n  return {\n    rootComponent,\n    reRenders,\n    network,\n    tti,\n    startup,\n    fps\n  };\n}\n","import React, { useRef, useState } from 'react';\nimport { View, Text, StyleSheet, PanResponder, Animated, Dimensions, TouchableOpacity, Clipboard, Image } from 'react-native';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { getFPSColor } from '../metrics/fps';\nimport { getNetworkColor } from '../metrics/network';\nimport { opticEnabled } from '../store/metricsStore';\n\nconst minimizeImageUrl = 'https://img.icons8.com/material-rounded/24/ffffff/minus.png';\nconst maximizeImageUrl = 'https://img.icons8.com/ios-filled/50/ffffff/full-screen.png';\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\nconst METRICS_THRESHOLDS = {\n  TTI: {\n    good: 100,\n    warning: 300,\n  },\n  STARTUP: {\n    good: 100,\n    warning: 300,\n  },\n};\n\nconst getMetricColor = (value: number | null, type: 'TTI' | 'STARTUP') => {\n  if (value === null) return '#fff';\n  const thresholds = METRICS_THRESHOLDS[type];\n  if (value <= thresholds.good) return '#4CAF50'; // Green\n  if (value <= thresholds.warning) return '#FFC107'; // Yellow\n  return '#F44336'; // Red\n};\n\nconst getStatusColor = (status: number): string => {\n  if (status >= 200 && status < 300) return '#4CAF50'; // Green for success\n  if (status >= 400) return '#F44336'; // Red for client/server errors\n  return '#FFC107'; // Yellow for other status codes\n};\n\nexport const Overlay: React.FC = () => {\n  console.log('opticEnabled', opticEnabled);\n  if (!opticEnabled) return null;\n\n  const currentScreen = useMetricsStore((state) => state.currentScreen);\n  const screens = useMetricsStore((state) => state.screens);\n  const startupTime = useMetricsStore((state) => state.startupTime);\n  const fps = useMetricsStore((state) => state.fps);\n  const networkRequests = useMetricsStore((state) => state.networkRequests);\n  const [isMinimized, setIsMinimized] = useState(false);\n\n  const pan = useRef(new Animated.ValueXY()).current;\n  const [position, setPosition] = useState({ x: SCREEN_WIDTH - 200, y: 100 });\n\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderMove: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds\n        const boundedX = Math.max(0, Math.min(newX, SCREEN_WIDTH - 180));\n        const boundedY = Math.max(0, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        pan.setValue({ x: boundedX - position.x, y: boundedY - position.y });\n      },\n      onPanResponderRelease: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds\n        const boundedX = Math.max(0, Math.min(newX, SCREEN_WIDTH - 180));\n        const boundedY = Math.max(0, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        setPosition({ x: boundedX, y: boundedY });\n        pan.setValue({ x: 0, y: 0 });\n      },\n    })\n  ).current;\n\n  const currentScreenMetrics = currentScreen ? screens[currentScreen] : null;\n  const latestRequest = networkRequests[networkRequests.length - 1];\n\n  const handleCopyMetrics = () => {\n    const metrics = {\n      currentScreen,\n      fps,\n      networkRequest: latestRequest ? {\n        url: latestRequest.url,\n        duration: Math.round(latestRequest.duration),\n        status: latestRequest.status\n      } : null,\n      tti: currentScreenMetrics?.tti,\n      startupTime,\n      reRenders: currentScreenMetrics?.reRenderCounts\n    };\n    \n    Clipboard.setString(JSON.stringify(metrics, null, 2));\n  };\n\n  // Debug logging for network requests\n  React.useEffect(() => {\n    if (latestRequest) {\n      console.log('[useoptic] Overlay received network request:', {\n        url: latestRequest.url,\n        duration: Math.round(latestRequest.duration),\n        status: latestRequest.status\n      });\n    }\n  }, [latestRequest]);\n\n  return (\n    <SafeAreaView style={styles.safeArea} pointerEvents=\"box-none\">\n      <Animated.View\n        style={[\n          styles.overlay,\n          {\n            transform: [\n              { translateX: pan.x },\n              { translateY: pan.y },\n            ],\n            left: position.x,\n            top: position.y,\n          },\n        ]}\n        {...panResponder.panHandlers}\n      >\n        <View style={styles.dragHandle} />\n        <View style={styles.header}>\n          <View style={styles.headerTop}>\n            <Text style={styles.text}>Performance Metrics</Text>\n            <View style={styles.headerButtons}>\n              {/* <TouchableOpacity \n                style={styles.iconButton}\n                onPress={handleCopyMetrics}\n              >\n                <Text style={styles.iconButtonText}>📋</Text>\n              </TouchableOpacity> */}\n              <TouchableOpacity\n                style={[styles.iconButton]}\n                onPress={() => setIsMinimized(!isMinimized)}\n              >\n                <Image\n                  source={{ uri: isMinimized ? maximizeImageUrl : minimizeImageUrl }}\n                  style={styles.icon}\n                />\n              </TouchableOpacity>\n            </View>\n          </View>\n          <View style={styles.screenNameContainer}>\n            <Text style={styles.screenName}>\n              {currentScreen || 'No Screen'}\n            </Text>\n          </View>\n        </View>\n        \n        {!isMinimized && (\n          <View style={styles.metricsContainer}>\n            <View style={styles.performanceSection}>\n              <View style={styles.metricRow}>\n                <Text style={styles.metricLabel}>FPS</Text>\n                <Text \n                  style={[\n                    styles.metricValue,\n                    { color: getFPSColor(fps) }\n                  ]}\n                >\n                  {fps !== null ? `${fps}` : '...'}\n                </Text>\n              </View>\n              <View style={styles.divider} />\n\n              <View style={styles.metricRow}>\n                <Text style={styles.metricLabel}>Network Request</Text>\n                <View style={styles.networkInfo}>\n                  {latestRequest && (\n                    <>\n                      <Text \n                        style={[\n                          styles.metricValue,\n                          { color: getNetworkColor(latestRequest.duration) }\n                        ]}\n                      >\n                        {latestRequest.url.split('/').pop()} → {Math.round(latestRequest.duration)}ms\n                      </Text>\n                      {latestRequest.status !== 200 && (\n                        <Text \n                          style={[\n                            styles.statusText,\n                            { color: getStatusColor(latestRequest.status) }\n                          ]}\n                        >\n                          Status: {latestRequest.status} {latestRequest.status >= 500 ? '🔴' : '🟠'}\n                        </Text>\n                      )}\n                    </>\n                  )}\n                </View>\n              </View>\n              <View style={styles.divider} />\n\n              <View style={styles.metricRow}>\n                <Text style={styles.metricLabel}>TTI</Text>\n                <Text \n                  style={[\n                    styles.metricValue,\n                    { color: getMetricColor(currentScreenMetrics?.tti || null, 'TTI') }\n                  ]}\n                >\n                  {currentScreenMetrics?.tti !== null ? `${currentScreenMetrics?.tti}ms` : '...'}\n                </Text>\n              </View>\n              <View style={styles.divider} />\n\n              <View style={styles.metricRow}>\n                <Text style={styles.metricLabel}>Startup Time</Text>\n                <Text \n                  style={[\n                    styles.metricValue,\n                    { color: getMetricColor(startupTime, 'STARTUP') }\n                  ]}\n                >\n                  {startupTime !== null ? `${startupTime}ms` : '...'}\n                </Text>\n              </View>\n            </View>\n\n            {currentScreenMetrics && Object.keys(currentScreenMetrics.reRenderCounts).length > 0 && (\n              <View style={styles.reRendersContainer}>\n                <View style={styles.divider} />\n                <Text style={styles.reRendersTitle}>Re-renders</Text>\n                {Object.entries(currentScreenMetrics.reRenderCounts).map(([name, count], index, array) => (\n                  <React.Fragment key={name}>\n                    <View style={styles.reRenderRow}>\n                      <Text style={styles.reRenderName}>{name}</Text>\n                      <View style={styles.reRenderCountContainer}>\n                        <Text style={styles.reRenderCount}>{count}</Text>\n                        <Text style={styles.reRenderCountSuffix}>x</Text>\n                      </View>\n                    </View>\n                    {index < array.length - 1 && <View style={styles.divider} />}\n                  </React.Fragment>\n                ))}\n              </View>\n            )}\n          </View>\n        )}\n        <View style={styles.poweredByContainer}>\n          <Text style={styles.poweredByText}>Powered by Optic</Text>\n        </View>\n      </Animated.View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'box-none',\n  },\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'rgba(33, 33, 33, 0.95)',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    zIndex: 9999,\n    elevation: 20,\n    minWidth: 200,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n  },\n  dragHandle: {\n    width: 40,\n    height: 4,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 2,\n    alignSelf: 'center',\n    marginBottom: 8,\n  },\n  header: {\n    marginBottom: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: 'rgba(255, 255, 255, 0.1)',\n    paddingBottom: 8,\n  },\n  headerTop: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  headerButtons: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  iconButton: {\n    padding: 4,\n    borderRadius: 4,\n    backgroundColor: 'rgba(33, 33, 33, 0.95)',\n    width: 24,\n    height: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 10,\n  },\n  icon: {\n    width: 20,\n    height: 20,\n    resizeMode: 'contain',\n  },\n  text: {\n    color: '#fff',\n    fontWeight: '600',\n    fontSize: 15,\n    letterSpacing: 0.5,\n  },\n  screenNameContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  screenNameLabel: {\n    color: '#fff',\n    fontSize: 12,\n    opacity: 0.7,\n    marginRight: 4,\n  },\n  screenName: {\n    color: '#fff',\n    fontSize: 13,\n    fontWeight: '600',\n    fontStyle: 'italic',\n  },\n  metricsContainer: {\n    gap: 4,\n  },\n  performanceSection: {\n    gap: 2,\n  },\n  metricRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 1,\n  },\n  metricLabel: {\n    color: '#fff',\n    fontSize: 13,\n    opacity: 0.7,\n  },\n  metricValue: {\n    fontSize: 13,\n    fontWeight: '500',\n  },\n  reRendersContainer: {\n    gap: 2,\n  },\n  divider: {\n    height: 1,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    marginVertical: 2,\n  },\n  reRendersTitle: {\n    color: '#fff',\n    fontSize: 13,\n    opacity: 0.7,\n    marginBottom: 2,\n  },\n  reRenderRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 1,\n  },\n  reRenderName: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  reRenderCountContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  reRenderCount: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  reRenderCountSuffix: {\n    color: '#fff',\n    fontSize: 10,\n    opacity: 0.7,\n    marginLeft: 2,\n  },\n  networkInfo: {\n    alignItems: 'flex-end',\n    gap: 0,\n  },\n  statusText: {\n    fontSize: 12,\n    marginTop: 1,\n  },\n  poweredByContainer: {\n    alignSelf: 'flex-end',\n    marginTop: 12,\n    marginBottom: -4,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    borderRadius: 6,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n  },\n  poweredByText: {\n    color: '#fff',\n    fontSize: 10,\n    fontWeight: '600',\n    opacity: 0.7,\n    letterSpacing: 0.2,\n  },\n});\n","import * as React from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\n\nconst { useEffect, useRef } = React;\n\n/**\n * Hook to monitor and log prop changes for a component.\n * @param componentName Name of the component\n * @param props Component props\n */\nexport function useRenderMonitor<T extends Record<string, any>>(\n  componentName: string,\n  props: T\n) {\n  if (!React) {\n    console.error('[useoptic] React is not available. Make sure React is properly imported.');\n    return;\n  }\n\n  const prevProps = useRef<T | null>(null);\n  const incrementReRender = useMetricsStore((state) => state.incrementReRender);\n  const currentScreen = useMetricsStore((state) => state.currentScreen);\n\n  useEffect(() => {\n    // Reset prevProps when screen changes\n    prevProps.current = null;\n  }, [currentScreen]);\n\n  useEffect(() => {\n    if (prevProps.current) {\n      const changedProps: Record<string, { from: any; to: any }> = {};\n      for (const key of Object.keys(props)) {\n        if (prevProps.current[key] !== props[key]) {\n          changedProps[key] = {\n            from: prevProps.current[key],\n            to: props[key],\n          };\n        }\n      }\n      if (Object.keys(changedProps).length > 0) {\n        incrementReRender(componentName);\n        console.log(\n          `[useoptic] ${componentName} re-rendered. Changed props:`,\n          changedProps\n        );\n      }\n    }\n    prevProps.current = props;\n  });\n}\n\nlet renderTrackingSetup = false;\n\n/**\n * Sets up global render tracking (one-time log).\n */\nexport function setupRenderTracking() {\n  if (!renderTrackingSetup) {\n    renderTrackingSetup = true;\n    console.log('[useoptic] Re-render tracking enabled');\n  }\n}\n","import { useEffect, useRef, useCallback } from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\n\ndeclare global {\n  var __OPTIC_SCREEN_TTI_CAPTURED__: Record<string, boolean>;\n  var __OPTIC_SCREEN_TTI_START__: Record<string, number>;\n}\n\nif (!global.__OPTIC_SCREEN_TTI_CAPTURED__) {\n  global.__OPTIC_SCREEN_TTI_CAPTURED__ = {};\n}\n\nif (!global.__OPTIC_SCREEN_TTI_START__) {\n  global.__OPTIC_SCREEN_TTI_START__ = {};\n}\n\n/**\n * Hook to track screen performance metrics.\n * @param screenName Name of the current screen\n */\nexport function useScreenMetrics(screenName: string) {\n  \n  const setCurrentScreen = useMetricsStore((state) => state.setCurrentScreen);\n  const setTTI = useMetricsStore((state) => state.setTTI);\n  const screens = useMetricsStore((state) => state.screens);\n  const prevScreenRef = useRef<string | null>(null);\n  const mountedRef = useRef(true);\n\n  // Memoize the screen change handler\n  const handleScreenChange = useCallback(() => {\n    const isNewScreen = prevScreenRef.current !== screenName;\n    if (isNewScreen) {\n      prevScreenRef.current = screenName;\n      // Reset TTI capture flag for the new screen\n      global.__OPTIC_SCREEN_TTI_CAPTURED__[screenName] = false;\n      setCurrentScreen(screenName);\n    }\n  }, [screenName, setCurrentScreen]);\n\n  // Handle screen changes\n  useEffect(() => {\n    handleScreenChange();\n  }, [handleScreenChange]);\n\n  // Handle TTI measurement\n  useEffect(() => {\n    mountedRef.current = true;\n\n    if (!global.__OPTIC_SCREEN_TTI_CAPTURED__[screenName]) {\n      console.log(`[useoptic] Measuring TTI for \"${screenName}\"`);\n      global.__OPTIC_SCREEN_TTI_CAPTURED__[screenName] = true;\n      global.__OPTIC_SCREEN_TTI_START__[screenName] = Date.now();\n      setTTI(screenName, null);\n\n      // Use requestAnimationFrame to ensure we measure after the screen is rendered\n      requestAnimationFrame(() => {\n        if (mountedRef.current) {\n          const start = global.__OPTIC_SCREEN_TTI_START__[screenName];\n          const tti = Date.now() - start;\n          setTTI(screenName, tti);\n        }\n      });\n    } else {\n      console.log(`[useoptic] TTI already captured for \"${screenName}\"`);\n    }\n\n    return () => {\n      mountedRef.current = false;\n      \n      // Only reset TTI if we're actually unmounting the screen\n      if (prevScreenRef.current !== screenName) {\n        if (screens[screenName]) {\n          setTTI(screenName, null);\n        }\n      }\n    };\n  }, [screenName, setTTI, screens]);\n} "],"mappings":"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","names":["state","React","React","React","React","useEffect","useRef","React","useEffect","useRef","useRef","useEffect"]}