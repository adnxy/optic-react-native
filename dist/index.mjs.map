{"version":3,"sources":["../src/metrics/globalRenderTracking.ts","../src/store/metricsStore.ts","../src/metrics/network.ts","../src/metrics/startup.ts","../src/core/initOptic.ts","../src/providers/OpticProvider.tsx","../src/overlay/Overlay.tsx","../src/metrics/fps.ts","../src/metrics/reRenders.ts","../src/metrics/trace.ts"],"sourcesContent":["import * as React from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\n\ndeclare global {\n  var __OPTIC_ROOT_COMPONENT__: React.ComponentType<any> | undefined;\n  var __OPTIC_RENDER_TRACKING_ENABLED__: boolean;\n}\n\n// Store to keep track of component renders\nconst renderCounts: Record<string, number> = {};\n\n// Create a wrapper component that tracks renders\nconst withRenderTracking = (WrappedComponent: React.ComponentType<any>) => {\n  const RenderTrackingWrapper: React.FC<any> = (props) => {\n    const componentName = WrappedComponent.displayName || WrappedComponent.name || 'Unknown';\n    const incrementReRender = useMetricsStore((state) => state.incrementReRender);\n    \n    React.useEffect(() => {\n      if (global.__OPTIC_RENDER_TRACKING_ENABLED__) {\n        const reRenderInfo = {\n          componentName,\n          timestamp: Date.now(),\n          changedProps: props,\n          renderCount: (renderCounts[componentName] || 0) + 1\n        };\n        incrementReRender(componentName, reRenderInfo);\n        renderCounts[componentName] = (renderCounts[componentName] || 0) + 1;\n      }\n    });\n\n    return React.createElement(WrappedComponent, props);\n  };\n\n  return RenderTrackingWrapper;\n};\n\n// Function to wrap any component with render tracking\nexport function wrapWithRenderTracking<T extends React.ComponentType<any>>(\n  component: T\n): T {\n  if (!component) return component;\n  \n  // Skip if already wrapped\n  if ((component as any).__OPTIC_WRAPPED__) return component;\n  \n  const wrapped = withRenderTracking(component);\n  (wrapped as any).__OPTIC_WRAPPED__ = true;\n  return wrapped as T;\n}\n\n// Function to enable/disable render tracking\nexport function setRenderTrackingEnabled(enabled: boolean) {\n  global.__OPTIC_RENDER_TRACKING_ENABLED__ = enabled;\n}\n\n// Function to wrap the root component\nexport function setupGlobalRenderTracking() {\n  // Get the root component\n  const rootComponent = global.__OPTIC_ROOT_COMPONENT__;\n  if (!rootComponent) {\n    return;\n  }\n\n  // Wrap the root component with render tracking\n  const wrappedRoot = wrapWithRenderTracking(rootComponent);\n  global.__OPTIC_ROOT_COMPONENT__ = wrappedRoot;\n}\n\n// Function to set the root component\nexport function setRootComponent(component: React.ComponentType<any>) {\n  if (!component) return;\n  \n  global.__OPTIC_ROOT_COMPONENT__ = component;\n  \n  // If render tracking is enabled, wrap the component\n  if (global.__OPTIC_RENDER_TRACKING_ENABLED__) {\n    setupGlobalRenderTracking();\n  }\n}\n\n// Initialize render tracking\nexport function initRenderTracking() {\n  // Set initial state\n  global.__OPTIC_RENDER_TRACKING_ENABLED__ = true;\n  \n  // Wrap the root component if it exists\n  if (global.__OPTIC_ROOT_COMPONENT__) {\n    setupGlobalRenderTracking();\n  }\n} ","import { create } from 'zustand';\nimport { InitOpticOptions } from '../core/initOptic';\n\nexport interface NetworkRequest {\n  url: string;\n  method: string;\n  duration: number;\n  status: number;\n  [key: string]: any; // for any extra fields\n}\n\nexport interface Trace {\n  interactionName: string;\n  componentName: string;\n  duration: number;\n  timestamp: number;\n}\n\nexport interface MetricsState {\n  currentScreen: string | null;\n  screens: Record<string, { \n    reRenderCounts: Record<string, number>;\n    fps: number | null;\n  }>;\n  networkRequests: NetworkRequest[];\n  traces: Trace[];\n  startupTime: number | null;\n  setCurrentScreen: (screenName: string | null) => void;\n  incrementReRender: (componentName: string) => void;\n  setStartupTime: (time: number) => void;\n  setFPS: (fps: number, screenName: string) => void;\n  addNetworkRequest: (request: NetworkRequest) => void;\n  setTrace: (trace: Trace) => void;\n}\n\nexport const useMetricsStore = create<MetricsState>((set, get) => ({\n  currentScreen: null,\n  screens: {},\n  networkRequests: [],\n  traces: [],\n  startupTime: null,\n\n  setCurrentScreen: (screenName) => {\n    set((state) => {\n      // Initialize screen metrics if they don't exist\n      if (screenName && !state.screens[screenName]) {\n        return {\n          currentScreen: screenName,\n          screens: {\n            ...state.screens,\n            [screenName]: {\n              reRenderCounts: {},\n              fps: null,\n            },\n          },\n        };\n      }\n      return { currentScreen: screenName };\n    });\n  },\n\n  incrementReRender: (componentName) => {\n    const state = get();\n    if (!state.currentScreen) return;\n    \n    const currentScreen = state.screens[state.currentScreen];\n    const currentCount = currentScreen.reRenderCounts[componentName] || 0;\n    \n    set((state) => ({\n      screens: {\n        ...state.screens,\n        [state.currentScreen!]: {\n          ...currentScreen,\n          reRenderCounts: {\n            ...currentScreen.reRenderCounts,\n            [componentName]: currentCount + 1,\n          },\n        },\n      },\n    }));\n  },\n\n  setStartupTime: (time) => {\n    set({ startupTime: time });\n  },\n\n  setFPS: (fps, screenName) => {\n    set((state) => ({\n      screens: {\n        ...state.screens,\n        [screenName]: {\n          ...state.screens[screenName],\n          fps,\n        },\n      },\n    }));\n  },\n\n  addNetworkRequest: (request) => {\n    set((state) => ({\n      networkRequests: [...state.networkRequests, request].slice(-50), // Keep last 50 requests\n    }));\n  },\n\n  setTrace: (trace) => {\n    set((state) => ({\n      traces: [...state.traces, trace].slice(-10), // Keep last 10 traces\n    }));\n  },\n}));\n\nexport let opticEnabled = true;\n\nexport function setOpticEnabled(value: boolean) {\n  opticEnabled = value;\n}\n\nexport function initOptic(options: InitOpticOptions = {}) {\n  const { enabled = true, onMetricsLogged } = options;\n  opticEnabled = enabled;\n  if (!enabled) {\n    return;\n  }\n  // ...rest of your logic...\n}","import { useMetricsStore } from '../store/metricsStore';\n\n// Network performance thresholds (in milliseconds)\nconst NETWORK_THRESHOLDS = {\n  GOOD: 200,\n  WARNING: 500,\n  CRITICAL: 1000,\n};\n\nlet originalFetch: typeof fetch | null = null;\nlet pendingRequests = new Map<string, { startTime: number; url: string; method: string }>();\n\nconst formatDuration = (duration: number): string => {\n  if (duration >= 1000) {\n    return `${(duration / 1000).toFixed(1)}s`;\n  }\n  return `${duration}ms`;\n};\n\nexport const initNetworkTracking = () => {\n  if (originalFetch !== null) return; // Already initialized\n\n  try {\n    originalFetch = global.fetch;\n    global.fetch = async function (input: RequestInfo | URL, init?: RequestInit) {\n      const startTime = Date.now();\n      const url = input instanceof Request ? input.url : input.toString();\n      const method = input instanceof Request ? input.method : (init?.method || 'GET');\n\n      // Store the request start time\n      pendingRequests.set(url, { startTime, url, method });\n\n      try {\n        const response = await originalFetch!(input, init);\n        const responseTime = Date.now();\n        const responseDuration = responseTime - startTime;\n        \n        // Clone the response to ensure we can read the body\n        const clonedResponse = response.clone();\n        \n        // Create a new response that will track when the body is read\n        const newResponse = new Response(response.body, {\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n        });\n\n        // Override the json and text methods to track completion\n        const originalJson = newResponse.json;\n        const originalText = newResponse.text;\n\n        newResponse.json = async function() {\n          try {\n            // First try to read the cloned response to ensure it's valid JSON\n            await clonedResponse.json();\n            \n            // If we get here, the JSON is valid, so read the actual response\n            const data = await originalJson.call(this);\n            const endTime = Date.now();\n            const totalDuration = endTime - startTime;\n\n            const metricsStore = useMetricsStore.getState();\n            const currentScreen = metricsStore.currentScreen;\n\n            const networkRequest = {\n              url,\n              method,\n              duration: totalDuration,\n              responseDuration,\n              status: response.status,\n              screen: currentScreen,\n              timestamp: endTime,\n              startTime,\n              endTime,\n            };\n\n            metricsStore.addNetworkRequest(networkRequest);\n            pendingRequests.delete(url);\n\n            return data;\n          } catch (error) {\n            const endTime = Date.now();\n            const totalDuration = endTime - startTime;\n\n            const metricsStore = useMetricsStore.getState();\n            const currentScreen = metricsStore.currentScreen;\n\n            const networkRequest = {\n              url,\n              method,\n              duration: totalDuration,\n              responseDuration,\n              status: response.status,\n              screen: currentScreen,\n              timestamp: endTime,\n              startTime,\n              endTime,\n              error: error instanceof Error ? error.message : 'Unknown error',\n            };\n\n            metricsStore.addNetworkRequest(networkRequest);\n            pendingRequests.delete(url);\n\n            throw error;\n          }\n        };\n\n        newResponse.text = async function() {\n          try {\n            const data = await originalText.call(this);\n            const endTime = Date.now();\n            const totalDuration = endTime - startTime;\n\n            const metricsStore = useMetricsStore.getState();\n            const currentScreen = metricsStore.currentScreen;\n\n            const networkRequest = {\n              url,\n              method,\n              duration: totalDuration,\n              responseDuration,\n              status: response.status,\n              screen: currentScreen,\n              timestamp: endTime,\n              startTime,\n              endTime,\n            };\n\n            metricsStore.addNetworkRequest(networkRequest);\n            pendingRequests.delete(url);\n\n            return data;\n          } catch (error) {\n            const endTime = Date.now();\n            const totalDuration = endTime - startTime;\n\n            const metricsStore = useMetricsStore.getState();\n            const currentScreen = metricsStore.currentScreen;\n\n            const networkRequest = {\n              url,\n              method,\n              duration: totalDuration,\n              responseDuration,\n              status: response.status,\n              screen: currentScreen,\n              timestamp: endTime,\n              startTime,\n              endTime,\n              error: error instanceof Error ? error.message : 'Unknown error',\n            };\n\n            metricsStore.addNetworkRequest(networkRequest);\n            pendingRequests.delete(url);\n\n            throw error;\n          }\n        };\n\n        return newResponse;\n      } catch (error) {\n        const endTime = Date.now();\n        const totalDuration = endTime - startTime;\n\n        const metricsStore = useMetricsStore.getState();\n        const currentScreen = metricsStore.currentScreen;\n\n        const networkRequest = {\n          url,\n          method,\n          duration: totalDuration,\n          status: 0,\n          screen: currentScreen,\n          timestamp: endTime,\n          startTime,\n          endTime,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        };\n\n        metricsStore.addNetworkRequest(networkRequest);\n        pendingRequests.delete(url);\n\n        throw error;\n      }\n    };\n  } catch (error) {\n    if (originalFetch) {\n      global.fetch = originalFetch;\n      originalFetch = null;\n    }\n  }\n};\n\nexport const stopNetworkTracking = () => {\n  if (originalFetch === null) return;\n\n  global.fetch = originalFetch;\n  originalFetch = null;\n  pendingRequests.clear();\n};\n\nexport const getNetworkColor = (duration: number | null | undefined): string => {\n  if (duration === null || duration === undefined) return '#666666';\n  if (duration <= NETWORK_THRESHOLDS.GOOD) return '#4CAF50';\n  if (duration <= NETWORK_THRESHOLDS.WARNING) return '#FFC107';\n  return '#F44336';\n};\n\nexport const getLatestNetworkRequest = () => {\n  const metricsStore = useMetricsStore.getState();\n  const currentScreen = metricsStore.currentScreen;\n  const networkRequests = metricsStore.networkRequests;\n  const screenNetworkRequests = networkRequests.filter(req => req.screen === currentScreen);\n  return screenNetworkRequests[screenNetworkRequests.length - 1];\n}; ","export {};\n\nimport { useMetricsStore } from '../store/metricsStore';\n\n// Global app start time (should be set as early as possible in the app entrypoint)\ndeclare global {\n  var __OPTIC_APP_START_TIME__: number | undefined;\n  var __OPTIC_STARTUP_CAPTURED__: boolean;\n}\n\nif (global.__OPTIC_APP_START_TIME__ === undefined) {\n  global.__OPTIC_APP_START_TIME__ = Date.now();\n}\n\nif (global.__OPTIC_STARTUP_CAPTURED__ === undefined) {\n  global.__OPTIC_STARTUP_CAPTURED__ = false;\n}\n\n/**\n * Measures time since global app start and logs it to the console.\n * Only measures once and stores the result.\n */\nexport function trackStartupTime() {\n  // Only measure startup time once\n  if (global.__OPTIC_STARTUP_CAPTURED__) {\n    return;\n  }\n\n  const start = global.__OPTIC_APP_START_TIME__ || Date.now();\n  \n  // Use requestAnimationFrame to ensure we measure after initial render\n  requestAnimationFrame(() => {\n    if (!global.__OPTIC_STARTUP_CAPTURED__) {\n      const duration = Date.now() - start;\n      \n      // Mark as captured before setting the time to prevent race conditions\n      global.__OPTIC_STARTUP_CAPTURED__ = true;\n      \n      useMetricsStore.getState().setStartupTime(duration);\n    }\n  });\n}\n","import { initRenderTracking } from '../metrics/globalRenderTracking';\nimport { initNetworkTracking } from '../metrics/network';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { trackStartupTime } from '../metrics/startup';\nimport { setOpticEnabled } from '../store/metricsStore';\nimport React from 'react';\n\nexport interface InitOpticOptions {\n  enabled?: boolean;\n  onMetricsLogged?: (metrics: any) => void;\n  network?: boolean;\n  startup?: boolean;\n  reRenders?: boolean;\n  traces?: boolean;\n}\n\nexport interface OpticConfig {\n  enabled: boolean;\n  onMetricsLogged?: (metrics: any) => void;\n  network: boolean;\n  startup: boolean;\n  reRenders: boolean;\n  traces: boolean;\n}\n\n// Create a wrapper component that automatically tracks screen names\nfunction withScreenTracking<P extends object>(WrappedComponent: React.ComponentType<P>) {\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || 'Unknown';\n  const screenName = displayName.replace(/Screen$/, '');\n\n  function WithScreenTracking(props: P) {\n    const setCurrentScreen = useMetricsStore((state) => state.setCurrentScreen);\n    \n    React.useEffect(() => {\n      setCurrentScreen(screenName);\n      return () => setCurrentScreen(null);\n    }, [setCurrentScreen]);\n\n    return React.createElement(WrappedComponent, props);\n  }\n\n  WithScreenTracking.displayName = `WithScreenTracking(${displayName})`;\n  return WithScreenTracking;\n}\n\n// Function to check if a component is likely a screen\nfunction isScreenComponent(component: any): boolean {\n  const name = component.displayName || component.name || '';\n  return name.endsWith('Screen') || name.endsWith('Page') || name.endsWith('View');\n}\n\n// Store to keep track of wrapped components\nconst wrappedComponents = new WeakMap();\n\n// Function to wrap a component if it's a screen\nfunction wrapIfScreen<P extends object>(Component: React.ComponentType<P>): React.ComponentType<P> {\n  if (!isScreenComponent(Component)) {\n    return Component;\n  }\n\n  // Check if already wrapped\n  if (wrappedComponents.has(Component)) {\n    return wrappedComponents.get(Component);\n  }\n\n  // Wrap the component\n  const wrapped = withScreenTracking(Component);\n  wrappedComponents.set(Component, wrapped);\n  return wrapped;\n}\n\nexport function initOptic(options: InitOpticOptions = {}) {\n  const {\n    enabled = true,\n    onMetricsLogged,\n    network = true,\n    startup = true,\n    reRenders = true,\n    traces = true,\n  } = options;\n\n  const config: OpticConfig = {\n    enabled,\n    onMetricsLogged,\n    network,\n    startup,\n    reRenders,\n    traces,\n  };\n\n  setOpticEnabled(enabled);\n  if (!enabled) {\n    // Do not initialize anything if disabled\n    return;\n  }\n\n  // Initialize render tracking if enabled\n  if (reRenders) {\n    initRenderTracking();\n  }\n\n  // Initialize network tracking if enabled\n  if (network) {\n    initNetworkTracking();\n  }\n\n  // Track startup time if enabled\n  if (startup) {\n    trackStartupTime();\n  }\n\n  // Initialize metrics store\n  useMetricsStore.getState();\n\n  // Subscribe to metrics changes and call the callback\n  if (onMetricsLogged) {\n    const unsubscribe = useMetricsStore.subscribe((metrics) => {\n      onMetricsLogged(metrics);\n    });\n    // Optionally return unsubscribe so the user can clean up\n    return {\n      config,\n      unsubscribe,\n    };\n  }\n\n  return config;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { Overlay } from '../overlay/Overlay';\nimport { useNavigation, useRoute, useNavigationContainerRef } from '@react-navigation/native';\nimport { usePathname, useSegments } from 'expo-router';\nimport { initRenderTracking } from '../metrics/globalRenderTracking';\nimport { FPSManager } from '../metrics/fps';\n\ninterface OpticProviderProps {\n  children: React.ReactNode;\n  /**\n   * Enable or disable specific metrics\n   */\n  metrics?: {\n    enabled?: boolean;\n    startup?: boolean;\n    reRenders?: boolean;\n    fps?: boolean;\n    network?: boolean;\n    traces?: boolean;\n  };\n  /**\n   * Show or hide the performance overlay\n   */\n  showOverlay?: boolean;\n}\n\nconst defaultMetrics = {\n  enabled: true,\n  startup: true,\n  reRenders: true,\n  fps: true,\n  network: true,\n  traces: true,\n};\n\nexport const OpticProvider: React.FC<OpticProviderProps> = ({ \n  children,\n  metrics = defaultMetrics,\n  showOverlay = true\n}) => {\n  const { setCurrentScreen } = useMetricsStore();\n  const currentScreen = useMetricsStore((state) => state.currentScreen);\n  const pathname = usePathname();\n  const segments = useSegments();\n  const navigationRef = useNavigationContainerRef();\n  const fpsManager = React.useRef<FPSManager | null>(null);\n\n  // Navigation hooks\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // Initialize re-render tracking if enabled\n  useEffect(() => {\n    if (metrics.reRenders) {\n      initRenderTracking();\n    }\n  }, [metrics.reRenders]);\n\n  useEffect(() => {\n    if (metrics.enabled && metrics.fps) {\n      fpsManager.current = new FPSManager();\n      fpsManager.current.startTracking();\n    }\n\n    return () => {\n      if (fpsManager.current) {\n        fpsManager.current.stopTracking();\n      }\n    };\n  }, [metrics.enabled, metrics.fps]);\n\n  // Function to get the current screen name\n  const getCurrentScreenName = () => {\n    // Try to get screen name from Expo Router first\n    if (pathname) {\n      return pathname;\n    }\n\n    // Fallback to React Navigation\n    if (navigationRef.current) {\n      const currentRoute = navigationRef.current.getCurrentRoute();\n      if (currentRoute?.name) {\n        return currentRoute.name;\n      }\n    }\n\n    // If no screen name is found, use the first segment or default to 'index'\n    return segments[0] || 'index';\n  };\n\n  // Handle screen changes and initial route\n  useEffect(() => {\n    const screenName = getCurrentScreenName();\n    \n    // Always set the current screen, even if it's the same\n    // This ensures we capture the initial route\n    setCurrentScreen(screenName);\n  }, [pathname, segments, navigationRef.current]);\n\n  return (\n    <>\n      {children}\n      {showOverlay && <Overlay />}\n    </>\n  );\n}; ","import React, { useRef, useState } from 'react';\nimport { View, Text, StyleSheet, PanResponder, Animated, Dimensions, TouchableOpacity, Clipboard, Image, Platform, Linking, ScrollView } from 'react-native';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getFPSColor } from '../metrics/fps';\nimport { getNetworkColor, getLatestNetworkRequest } from '../metrics/network';\nimport { opticEnabled } from '../store/metricsStore';\n\nconst minimizeImageUrl = 'https://img.icons8.com/material-rounded/24/ffffff/minus.png';\nconst maximizeImageUrl = 'https://img.icons8.com/ios-filled/50/ffffff/full-screen.png';\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\nconst METRICS_THRESHOLDS = {\n  STARTUP: {\n    good: 1000, // 1 second\n    warning: 2000, // 2 seconds\n  },\n  TRACE: {\n    good: 50, // 50ms\n    warning: 200, // 200ms\n  },\n  FPS: {\n    good: 55, // 55+ FPS is good\n    warning: 30, // 30+ FPS is acceptable\n  },\n};\n\nconst getMetricColor = (metric: 'STARTUP' | 'TRACE' | 'FPS', value: number) => {\n  const thresholds = METRICS_THRESHOLDS[metric];\n  if (metric === 'FPS') {\n    if (value >= thresholds.good) return '#4CAF50';\n    if (value >= thresholds.warning) return '#FFC107';\n    return '#F44336';\n  }\n  if (value <= thresholds.good) return '#4CAF50';\n  if (value <= thresholds.warning) return '#FFC107';\n  return '#F44336';\n};\n\nconst getStatusColor = (status: number): string => {\n  if (status >= 200 && status < 300) return '#4CAF50'; // Green for success\n  if (status >= 400) return '#F44336'; // Red for client/server errors\n  return '#FFC107'; // Yellow for other status codes\n};\n\nexport const Overlay: React.FC = () => {\n  if (!opticEnabled) return null;\n\n  const insets = useSafeAreaInsets();\n  const currentScreen = useMetricsStore((state) => state.currentScreen);\n  const screens = useMetricsStore((state) => state.screens);\n  const startupTime = useMetricsStore((state) => state.startupTime);\n  const networkRequests = useMetricsStore((state) => state.networkRequests);\n  const traces = useMetricsStore((state) => state.traces);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [isNetworkExpanded, setIsNetworkExpanded] = useState(false);\n  const [isTracesExpanded, setIsTracesExpanded] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const [expandedTrace, setExpandedTrace] = useState(false);\n\n  const pan = useRef(new Animated.ValueXY()).current;\n  const [position, setPosition] = useState({ \n    x: (SCREEN_WIDTH - 300) / 2,\n    y: insets.top + 20\n  });\n\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderMove: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds with padding\n        const boundedX = Math.max(10, Math.min(newX, SCREEN_WIDTH - 290));\n        const boundedY = Math.max(insets.top + 10, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        // Update position directly without animation\n        setPosition({ x: boundedX, y: boundedY });\n      },\n      onPanResponderRelease: () => {\n        // Reset the pan value without animation\n        pan.setValue({ x: 0, y: 0 });\n      },\n    })\n  ).current;\n\n  const currentScreenMetrics = currentScreen ? screens[currentScreen] : null;\n  const latestRequest = getLatestNetworkRequest();\n  const latestTrace = traces[traces.length - 1];\n\n  const handleCopyMetrics = () => {\n    try {\n      const metrics = {\n        currentScreen: currentScreen || 'No Screen',\n        startupTime: startupTime ? `${startupTime.toFixed(2)}ms` : 'N/A',\n        fps: currentScreenMetrics?.fps ? `${currentScreenMetrics.fps.toFixed(1)} FPS` : 'N/A',\n        latestNetworkRequest: latestRequest ? {\n          url: latestRequest.url,\n          duration: `${latestRequest.duration.toFixed(2)}ms`,\n          status: latestRequest.status\n        } : 'N/A',\n        latestTrace: latestTrace ? {\n          interactionName: latestTrace.interactionName,\n          componentName: latestTrace.componentName,\n          duration: `${latestTrace.duration.toFixed(2)}ms`,\n        } : 'N/A',\n      };\n      \n      // Use Clipboard API instead of console.log\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        Clipboard.setString(JSON.stringify(metrics, null, 2));\n      }\n    } catch (error) {\n      console.error('Error copying metrics:', error);\n    }\n  };\n\n  const handleOpenWebsite = () => {\n    Linking.openURL('https://useoptic.dev');\n  };\n\n  const renderCollapsedView = () => (\n    <View style={styles.collapsedContainer}>\n      <View style={styles.collapsedMetrics}>\n        <Text style={styles.collapsedMetric}>\n          🚀 {startupTime !== null ? `${startupTime.toFixed(1)}ms` : '...'}\n        </Text>\n        <Text style={styles.collapsedMetric}>\n          🎮 {currentScreenMetrics?.fps !== null && currentScreenMetrics?.fps !== undefined ? `${currentScreenMetrics.fps.toFixed(1)}` : '...'}\n        </Text>\n      </View>\n    </View>\n  );\n\n  if (!currentScreen) return null;\n\n  return (\n    <SafeAreaView style={styles.safeArea} pointerEvents=\"box-none\">\n      <Animated.View\n        style={[\n          styles.overlay,\n          isCollapsed ? styles.collapsedOverlay : null,\n          {\n            left: position.x,\n            top: position.y,\n          },\n        ]}\n        {...panResponder.panHandlers}\n      >\n        <TouchableOpacity \n          style={styles.dragHandle} \n          onPress={() => setIsCollapsed(!isCollapsed)}\n        />\n        \n        {isCollapsed ? (\n          renderCollapsedView()\n        ) : (\n          <>\n            <View style={styles.header}>\n              <View style={styles.headerTop}>\n                <Text style={styles.text}>Performance Metrics</Text>\n                <View style={styles.headerButtons}>\n                  <TouchableOpacity\n                    style={[styles.iconButton]}\n                    onPress={() => setIsMinimized(!isMinimized)}\n                  >\n                    <Image\n                      source={{ uri: isMinimized ? maximizeImageUrl : minimizeImageUrl }}\n                      style={styles.icon}\n                    />\n                  </TouchableOpacity>\n                </View>\n              </View>\n              <View style={styles.screenNameContainer}>\n                <Text style={styles.screenName}>\n                  {currentScreen || 'No Screen'}\n                </Text>\n              </View>\n            </View>\n            \n            {!isMinimized && (\n              <ScrollView style={styles.content}>\n                <View style={styles.section}>\n                  <Text style={styles.sectionTitle}>Performance Metrics</Text>\n                  {startupTime && (\n                    <Text style={[styles.metric, { color: getMetricColor('STARTUP', startupTime) }]}>Startup: {startupTime.toFixed(2)}ms</Text>\n                  )}\n                  {currentScreenMetrics?.fps && (\n                    <Text style={[styles.metric, { color: getMetricColor('FPS', currentScreenMetrics.fps) }]}>FPS: {currentScreenMetrics.fps.toFixed(1)}</Text>\n                  )}\n                </View>\n\n                {latestRequest && (\n                  <View style={styles.section}>\n                    <TouchableOpacity\n                      style={styles.sectionHeader}\n                      onPress={() => setIsNetworkExpanded(!isNetworkExpanded)}\n                    >\n                      <Text style={styles.sectionTitle}>Network Request</Text>\n                      <Text style={styles.expandIcon}>{isNetworkExpanded ? '▼' : '▶'}</Text>\n                    </TouchableOpacity>\n                    <View style={styles.networkInfo}>\n                      <Text style={[styles.metric, { color: getNetworkColor(latestRequest.duration) }]}>→ {Math.round(latestRequest.duration).toFixed(1)}ms</Text>\n                      {isNetworkExpanded && (\n                        <View style={styles.expandedNetworkInfo}>\n                          <View style={styles.statusContainer}>\n                            <Text style={[styles.statusCode, { color: getStatusColor(latestRequest.status) }]}>\n                              {latestRequest.status} {latestRequest.status >= 500 ? '🔴' : latestRequest.status >= 400 ? '🟠' : '🟢'}\n                            </Text>\n                          </View>\n                          <View style={styles.urlContainer}>\n                            <Text style={styles.networkUrl} numberOfLines={1} ellipsizeMode=\"middle\">{latestRequest.url}</Text>\n                          </View>\n                        </View>\n                      )}\n                    </View>\n                  </View>\n                )}\n\n                {traces.length > 0 && (\n                  <View style={styles.section}>\n                    <TouchableOpacity\n                      style={styles.sectionHeader}\n                      onPress={() => setIsTracesExpanded(!isTracesExpanded)}\n                    >\n                      <Text style={styles.sectionTitle}>Recent Traces</Text>\n                      <Text style={styles.expandIcon}>{isTracesExpanded ? '▼' : '▶'}</Text>\n                    </TouchableOpacity>\n                    {isTracesExpanded && traces.slice(-3).reverse().map((trace, idx) => (\n                      <View key={idx} style={styles.traceRow}>\n                        <Text style={styles.traceScreen}>{trace.interactionName} → {trace.componentName}</Text>\n                        <Text style={[styles.traceDuration, { color: getMetricColor('TRACE', trace.duration) }]}>{trace.duration.toFixed(1)}ms</Text>\n                      </View>\n                    ))}\n                  </View>\n                )}\n\n                <TouchableOpacity style={styles.copyButton} onPress={handleCopyMetrics}>\n                  <Text style={styles.copyButtonText}>Copy Metrics</Text>\n                </TouchableOpacity>\n              </ScrollView>\n            )}\n            <View style={styles.poweredByContainer}>\n              <TouchableOpacity onPress={handleOpenWebsite}>\n                <Text style={styles.poweredByText}>Powered by Optic</Text>\n              </TouchableOpacity>\n            </View>\n          </>\n        )}\n      </Animated.View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'box-none',\n  },\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'rgba(18, 18, 23, 0.98)',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 16,\n    zIndex: 9999,\n    elevation: 20,\n    width: 320,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.4,\n    shadowRadius: 8,\n  },\n  collapsedOverlay: {\n    width: 'auto',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n  },\n  collapsedContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  collapsedMetrics: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  collapsedMetric: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  dragHandle: {\n    width: 40,\n    height: 4,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 4,\n    alignSelf: 'center',\n    marginBottom: 6,\n  },\n  header: {\n    marginBottom: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: 'rgba(255, 255, 255, 0.15)',\n    paddingBottom: 6,\n  },\n  headerTop: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  headerButtons: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  iconButton: {\n    padding: 6,\n    borderRadius: 10,\n    backgroundColor: 'rgba(255, 255, 255, 0.15)',\n    width: 32,\n    height: 32,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  icon: {\n    width: 18,\n    height: 18,\n    resizeMode: 'contain',\n  },\n  text: {\n    color: '#fff',\n    fontWeight: '700',\n    fontSize: 16,\n    letterSpacing: 0.3,\n  },\n  screenNameContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 6,\n    backgroundColor: 'rgba(255, 255, 255, 0.12)',\n    paddingHorizontal: 10,\n    paddingVertical: 4,\n    borderRadius: 8,\n  },\n  screenName: {\n    color: '#fff',\n    fontSize: 13,\n    fontWeight: '600',\n    fontStyle: 'italic',\n  },\n  content: {\n    marginTop: 6,\n  },\n  section: {\n    marginBottom: 12,\n    backgroundColor: 'rgba(255, 255, 255, 0.05)',\n    borderRadius: 12,\n    padding: 10,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 6,\n  },\n  sectionTitle: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold',\n    letterSpacing: 0.2,\n  },\n  metric: {\n    color: '#fff',\n    fontSize: 13,\n    marginBottom: 3,\n    fontWeight: '500',\n  },\n  traceDetails: {\n    marginTop: 4,\n    padding: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.08)',\n    borderRadius: 8,\n  },\n  traceText: {\n    color: '#fff',\n    fontSize: 12,\n    marginBottom: 2,\n  },\n  copyButton: {\n    backgroundColor: 'rgba(33, 150, 243, 0.15)',\n    padding: 8,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 8,\n    borderWidth: 1,\n    borderColor: 'rgba(33, 150, 243, 0.3)',\n  },\n  copyButtonText: {\n    color: '#2196F3',\n    fontSize: 12,\n    fontWeight: '600',\n    letterSpacing: 0.3,\n  },\n  poweredByContainer: {\n    alignSelf: 'flex-end',\n    marginTop: 6,\n    marginBottom: -2,\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\n    borderRadius: 8,\n    paddingHorizontal: 10,\n    paddingVertical: 4,\n  },\n  poweredByText: {\n    color: '#fff',\n    fontSize: 11,\n    fontWeight: '600',\n    opacity: 0.8,\n    letterSpacing: 0.3,\n    textDecorationLine: 'underline',\n  },\n  expandIcon: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  networkInfo: {\n    marginTop: 4,\n  },\n  expandedNetworkInfo: {\n    marginTop: 6,\n    padding: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.08)',\n    borderRadius: 8,\n  },\n  statusContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  statusCode: {\n    color: '#fff',\n    fontSize: 13,\n    fontWeight: 'bold',\n  },\n  urlContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginLeft: 8,\n  },\n  networkUrl: {\n    color: '#fff',\n    fontSize: 12,\n    marginBottom: 2,\n  },\n  traceRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 4,\n    paddingVertical: 4,\n    paddingHorizontal: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.05)',\n    borderRadius: 6,\n  },\n  traceScreen: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  traceDuration: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '500',\n  },\n});\n","import { useMetricsStore } from '../store/metricsStore';\n\nexport interface FPSMetrics {\n  fps: number;\n  timestamp: number;\n}\n\nexport class FPSManager {\n  private frameCount: number = 0;\n  private lastTime: number = 0;\n  private animationFrameId: number | null = null;\n  private readonly updateInterval: number = 1000; // Update FPS every second\n\n  constructor() {\n    this.lastTime = performance.now();\n  }\n\n  private updateFPS = () => {\n    const currentTime = performance.now();\n    const elapsed = currentTime - this.lastTime;\n\n    if (elapsed >= this.updateInterval) {\n      const fps = Math.round((this.frameCount * 1000) / elapsed);\n      const metricsStore = useMetricsStore.getState();\n      const currentScreen = metricsStore.currentScreen;\n\n      if (currentScreen) {\n        metricsStore.setFPS(fps, currentScreen);\n      }\n\n      this.frameCount = 0;\n      this.lastTime = currentTime;\n    }\n\n    this.frameCount++;\n    this.animationFrameId = requestAnimationFrame(this.updateFPS);\n  };\n\n  public startTracking = () => {\n    if (!this.animationFrameId) {\n      this.lastTime = performance.now();\n      this.frameCount = 0;\n      this.animationFrameId = requestAnimationFrame(this.updateFPS);\n    }\n  };\n\n  public stopTracking = () => {\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n  };\n}\n\nexport const getFPSColor = (fps: number): string => {\n  if (fps >= 55) return '#4CAF50'; // Good (green)\n  if (fps >= 30) return '#FFC107'; // Warning (yellow)\n  return '#F44336'; // Poor (red)\n}; ","import React, { useEffect, useRef } from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\n\ninterface ReRenderInfo {\n  componentName: string;\n  timestamp: number;\n  changedProps: Record<string, { from: any; to: any }>;\n  renderCount: number;\n  stackTrace?: string;\n}\n\n/**\n * Hook to monitor and log prop changes for a component.\n * @param componentName Name of the component\n * @param props Component props\n * @param options Additional options for tracking\n */\nexport function useRenderMonitor<T extends Record<string, any>>(\n  componentName: string,\n  props: T,\n  options: {\n    debug?: boolean;\n    ignoreProps?: string[];\n    trackStack?: boolean;\n  } = {}\n) {\n  if (!React) return;\n\n  const { ignoreProps = [], trackStack = false } = options;\n  const prevProps = useRef<T | null>(null);\n  const renderCount = useRef(0);\n  const incrementReRender = useMetricsStore((state) => state.incrementReRender);\n  const currentScreen = useMetricsStore((state) => state.currentScreen);\n\n  useEffect(() => {\n    prevProps.current = null;\n    renderCount.current = 0;\n  }, [currentScreen]);\n\n  useEffect(() => {\n    if (prevProps.current) {\n      const changedProps: Record<string, { from: any; to: any }> = {};\n      \n      for (const key of Object.keys(props)) {\n        if (!ignoreProps.includes(key) && prevProps.current[key] !== props[key]) {\n          changedProps[key] = {\n            from: prevProps.current[key],\n            to: props[key],\n          };\n        }\n      }\n\n      if (Object.keys(changedProps).length > 0) {\n        renderCount.current++;\n        const reRenderInfo: ReRenderInfo = {\n          componentName,\n          timestamp: Date.now(),\n          changedProps,\n          renderCount: renderCount.current,\n        };\n\n        if (trackStack) {\n          reRenderInfo.stackTrace = new Error().stack;\n        }\n\n        incrementReRender(componentName);\n      }\n    }\n    prevProps.current = props;\n  });\n}\n\nlet renderTrackingSetup = false;\n\n/**\n * Sets up global render tracking with configuration options.\n * @param options Configuration options for render tracking\n */\nexport function setupRenderTracking(options: {\n  debug?: boolean;\n  trackStack?: boolean;\n} = {}) {\n  if (!renderTrackingSetup) {\n    renderTrackingSetup = true;\n  }\n}\n","import { useMetricsStore } from '../store/metricsStore';\n\ninterface Trace {\n  interactionName: string;\n  componentName: string;\n  duration: number;\n  timestamp: number;\n}\n\nclass TraceManager {\n  private activeTraces: Map<string, number> = new Map();\n  private traces: Trace[] = [];\n  private readonly MAX_TRACES = 10;\n\n  /**\n   * Start tracing an interaction\n   * @param interactionName Name of the interaction (e.g., 'OpenModal')\n   */\n  startTrace(interactionName: string) {\n    if (!__DEV__) return;\n    this.activeTraces.set(interactionName, Date.now());\n  }\n\n  /**\n   * End tracing and record the duration\n   * @param interactionName Name of the interaction\n   * @param componentName Name of the component that rendered\n   */\n  endTrace(interactionName: string, componentName: string) {\n    if (!__DEV__) return;\n\n    const startTime = this.activeTraces.get(interactionName);\n    if (!startTime) return;\n\n    const duration = Date.now() - startTime;\n    const trace: Trace = {\n      interactionName,\n      componentName,\n      duration,\n      timestamp: Date.now()\n    };\n\n    this.traces.unshift(trace);\n    if (this.traces.length > this.MAX_TRACES) {\n      this.traces.pop();\n    }\n\n    useMetricsStore.getState().setTrace(trace);\n    this.activeTraces.delete(interactionName);\n  }\n\n  /**\n   * Get all traces\n   */\n  getTraces(): Trace[] {\n    return [...this.traces];\n  }\n\n  /**\n   * Clear all traces\n   */\n  clearTraces() {\n    this.traces = [];\n    this.activeTraces.clear();\n  }\n}\n\nexport const traceManager = new TraceManager();\n\n// Export the public API\nexport const startTrace = traceManager.startTrace.bind(traceManager);\nexport const endTrace = traceManager.endTrace.bind(traceManager); "],"mappings":"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","names":["state","React","React","useEffect","React","React","React","useEffect","React","useEffect","useRef","React","useRef","useEffect"]}