{"version":3,"sources":["../src/core/initOptic.ts","../src/overlay/Overlay.tsx"],"sourcesContent":["export type InitOpticOptions = {\n  tti?: boolean;\n  startup?: boolean;\n  reRenders?: boolean;\n};\n\n/**\n * Initializes Optic performance logging systems based on options.\n * All features are enabled by default.\n */\nexport async function InitOptic(options: InitOpticOptions = {}) {\n  const {\n    tti = true,\n    startup = true,\n    reRenders = true,\n  } = options;\n\n  if (tti) {\n    await import('../metrics/tti');\n    console.log('[Optic] TTI tracking enabled');\n  }\n  if (startup) {\n    await import('../metrics/startup');\n    console.log('[Optic] Startup tracking enabled');\n  }\n  if (reRenders) {\n    await import('../metrics/reRenders');\n    console.log('[Optic] Re-render tracking enabled');\n  }\n}\n","import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { useMetricsStore } from '../store/metricsStore';\n\nconst Overlay: React.FC = () => {\n  const tti = useMetricsStore((state) => state.tti);\n  const startupTime = useMetricsStore((state) => state.startupTime);\n  const reRenderCounts = useMetricsStore((state) => state.reRenderCounts);\n\n  const reRenderList = Object.entries(reRenderCounts).map(([name, count]: [string, number]) => (\n    <Text style={styles.metric} key={name}>\n      {name}: {count}\n    </Text>\n  ));\n\n  return (\n    <View style={styles.overlay} pointerEvents=\"none\">\n      <Text style={styles.text}>[useoptic] Perf Overlay</Text>\n      <Text style={styles.metric}>TTI: {tti !== null ? `${tti}ms` : '...'} </Text>\n      <Text style={styles.metric}>Startup: {startupTime !== null ? `${startupTime}ms` : '...'} </Text>\n      <Text style={styles.metric}>Re-renders:</Text>\n      {reRenderList}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 24,\n    right: 16,\n    backgroundColor: 'rgba(20, 20, 20, 0.85)',\n    paddingVertical: 6,\n    paddingHorizontal: 14,\n    borderRadius: 8,\n    zIndex: 9999,\n    elevation: 20,\n    minWidth: 180,\n  },\n  text: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 14,\n    letterSpacing: 0.5,\n    marginBottom: 4,\n  },\n  metric: {\n    color: '#fff',\n    fontSize: 12,\n    marginBottom: 2,\n  },\n});\n\nexport default Overlay;\n"],"mappings":";;;;;;;;;AAUA,eAAsB,UAAU,UAA4B,CAAC,GAAG;AAC9D,QAAM;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,YAAY;AAAA,EACd,IAAI;AAEJ,MAAI,KAAK;AACP,UAAM,OAAO,oBAAgB;AAC7B,YAAQ,IAAI,8BAA8B;AAAA,EAC5C;AACA,MAAI,SAAS;AACX,UAAM,OAAO,wBAAoB;AACjC,YAAQ,IAAI,kCAAkC;AAAA,EAChD;AACA,MAAI,WAAW;AACb,UAAM,OAAO,0BAAsB;AACnC,YAAQ,IAAI,oCAAoC;AAAA,EAClD;AACF;;;AC7BA,OAAO,WAAW;AAClB,SAAS,MAAM,MAAM,kBAAkB;AAGvC,IAAM,UAAoB,MAAM;AAC9B,QAAM,MAAM,gBAAgB,CAAC,UAAU,MAAM,GAAG;AAChD,QAAM,cAAc,gBAAgB,CAAC,UAAU,MAAM,WAAW;AAChE,QAAM,iBAAiB,gBAAgB,CAAC,UAAU,MAAM,cAAc;AAEtE,QAAM,eAAe,OAAO,QAAQ,cAAc,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,MACnE,oCAAC,QAAK,OAAO,OAAO,QAAQ,KAAK,QAC9B,MAAK,MAAG,KACX,CACD;AAED,SACE,oCAAC,QAAK,OAAO,OAAO,SAAS,eAAc,UACzC,oCAAC,QAAK,OAAO,OAAO,QAAM,yBAAuB,GACjD,oCAAC,QAAK,OAAO,OAAO,UAAQ,SAAM,QAAQ,OAAO,GAAG,GAAG,OAAO,OAAM,GAAC,GACrE,oCAAC,QAAK,OAAO,OAAO,UAAQ,aAAU,gBAAgB,OAAO,GAAG,WAAW,OAAO,OAAM,GAAC,GACzF,oCAAC,QAAK,OAAO,OAAO,UAAQ,aAAW,GACtC,YACH;AAEJ;AAEA,IAAM,SAAS,WAAW,OAAO;AAAA,EAC/B,SAAS;AAAA,IACP,UAAU;AAAA,IACV,KAAK;AAAA,IACL,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IACnB,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,UAAU;AAAA,EACZ;AAAA,EACA,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,eAAe;AAAA,IACf,cAAc;AAAA,EAChB;AAAA,EACA,QAAQ;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,IACV,cAAc;AAAA,EAChB;AACF,CAAC;AAED,IAAO,kBAAQ;","names":[]}