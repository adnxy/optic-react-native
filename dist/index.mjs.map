{"version":3,"sources":["../src/core/initOptic.ts","../src/overlay/Overlay.tsx"],"sourcesContent":["export type InitOpticOptions = {\n  tti?: boolean;\n  startup?: boolean;\n  reRenders?: boolean;\n};\n\n/**\n * Initializes Optic performance logging systems based on options.\n * All features are enabled by default.\n */\nexport async function InitOptic(options: InitOpticOptions = {}) {\n  const {\n    tti = true,\n    startup = true,\n    reRenders = true,\n  } = options;\n\n  if (tti) {\n    const { trackTTI } = await import('../metrics/tti');\n    trackTTI();\n    console.log('[Optic] TTI tracking enabled');\n  }\n  if (startup) {\n    const { trackStartupTime } = await import('../metrics/startup');\n    trackStartupTime();\n    console.log('[Optic] Startup tracking enabled');\n  }\n  if (reRenders) {\n    const { setupRenderTracking } = await import('../metrics/reRenders');\n    setupRenderTracking();\n    console.log('[Optic] Re-render tracking enabled');\n  }\n}\n","import React, { useRef, useState } from 'react';\nimport { View, Text, StyleSheet, PanResponder, Animated, Dimensions } from 'react-native';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\nconst Overlay: React.FC = () => {\n  const tti = useMetricsStore((state) => state.tti);\n  const startupTime = useMetricsStore((state) => state.startupTime);\n  const reRenderCounts = useMetricsStore((state) => state.reRenderCounts);\n\n  const pan = useRef(new Animated.ValueXY()).current;\n  const [position, setPosition] = useState({ x: SCREEN_WIDTH - 200, y: 100 });\n\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderMove: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds\n        const boundedX = Math.max(0, Math.min(newX, SCREEN_WIDTH - 180));\n        const boundedY = Math.max(0, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        pan.setValue({ x: boundedX - position.x, y: boundedY - position.y });\n      },\n      onPanResponderRelease: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds\n        const boundedX = Math.max(0, Math.min(newX, SCREEN_WIDTH - 180));\n        const boundedY = Math.max(0, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        setPosition({ x: boundedX, y: boundedY });\n        pan.setValue({ x: 0, y: 0 });\n      },\n    })\n  ).current;\n\n  const reRenderList = Object.entries(reRenderCounts).map(([name, count]: [string, number]) => (\n    <Text style={styles.metric} key={name}>\n      {name}: {count}\n    </Text>\n  ));\n\n  return (\n    <SafeAreaView style={styles.safeArea} pointerEvents=\"box-none\">\n      <Animated.View\n        style={[\n          styles.overlay,\n          {\n            transform: [\n              { translateX: pan.x },\n              { translateY: pan.y },\n            ],\n            left: position.x,\n            top: position.y,\n          },\n        ]}\n        {...panResponder.panHandlers}\n      >\n        <View style={styles.dragHandle} />\n        <Text style={styles.text}>[useoptic] Perf Overlay</Text>\n        <Text style={styles.metric}>TTI: {tti !== null ? `${tti}ms` : '...'} </Text>\n        <Text style={styles.metric}>Startup: {startupTime !== null ? `${startupTime}ms` : '...'} </Text>\n        <Text style={styles.metric}>Re-renders:</Text>\n        {reRenderList}\n      </Animated.View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'box-none',\n  },\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'rgba(20, 20, 20, 0.85)',\n    paddingVertical: 6,\n    paddingHorizontal: 14,\n    borderRadius: 8,\n    zIndex: 9999,\n    elevation: 20,\n    minWidth: 180,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n  },\n  dragHandle: {\n    width: 40,\n    height: 4,\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n    borderRadius: 2,\n    alignSelf: 'center',\n    marginBottom: 8,\n  },\n  text: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 14,\n    letterSpacing: 0.5,\n    marginBottom: 4,\n  },\n  metric: {\n    color: '#fff',\n    fontSize: 12,\n    marginBottom: 2,\n  },\n});\n\nexport default Overlay;\n"],"mappings":"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","names":[]}