{"version":3,"sources":["../src/store/metricsStore.ts","../src/metrics/tti.ts","../src/metrics/startup.ts","../src/metrics/reRenders.ts","../src/index.ts","../src/core/initOptic.ts","../src/overlay/Overlay.tsx"],"sourcesContent":["import { create } from 'zustand';\n\ninterface MetricsState {\n  tti: number | null;\n  startupTime: number | null;\n  reRenderCounts: Record<string, number>;\n  setTTI: (tti: number) => void;\n  setStartupTime: (startupTime: number) => void;\n  incrementReRender: (componentName: string) => void;\n}\n\nexport const useMetricsStore = create<MetricsState>((set) => ({\n  tti: null,\n  startupTime: null,\n  reRenderCounts: {},\n  setTTI: (tti) => set({ tti }),\n  setStartupTime: (startupTime) => set({ startupTime }),\n  incrementReRender: (componentName) =>\n    set((state) => ({\n      reRenderCounts: {\n        ...state.reRenderCounts,\n        [componentName]: (state.reRenderCounts[componentName] || 0) + 1,\n      },\n    })),\n}));","import { useMetricsStore } from '../store/metricsStore';\n\nexport function trackTTI() {\n  if ((global as any).__OPTIC_TTI_CAPTURED__) return;\n  const start = Date.now();\n  requestAnimationFrame(() => {\n    const tti = Date.now() - start;\n    (global as any).__OPTIC_TTI_CAPTURED__ = true;\n    useMetricsStore.getState().setTTI(tti);\n    console.log(`[useoptic] TTI measured: ${tti}ms`);\n  });\n}\n","export {};\n\nimport { useMetricsStore } from '../store/metricsStore';\n\n// Global app start time (should be set as early as possible in the app entrypoint)\ndeclare global {\n  var __OPTIC_APP_START_TIME__: number | undefined;\n}\n\nif (global.__OPTIC_APP_START_TIME__ === undefined) {\n  global.__OPTIC_APP_START_TIME__ = Date.now();\n}\n\n/**\n * Measures time since global app start and logs it to the console.\n * Uses setTimeout(0) to simulate async readiness.\n */\nexport function trackStartupTime() {\n  setTimeout(() => {\n    const start = global.__OPTIC_APP_START_TIME__ || Date.now();\n    const duration = Date.now() - start;\n    useMetricsStore.getState().setStartupTime(duration);\n    console.log(`[useoptic] Startup time: ${duration}ms`);\n  }, 0);\n}\n","import * as React from 'react';\nimport { useMetricsStore } from '../store/metricsStore';\n\nconst { useEffect, useRef } = React;\n\n/**\n * Hook to monitor and log prop changes for a component.\n * @param componentName Name of the component\n * @param props Component props\n */\nexport function useRenderMonitor<T extends Record<string, any>>(\n  componentName: string,\n  props: T\n) {\n  if (!React) {\n    console.error('[useoptic] React is not available. Make sure React is properly imported.');\n    return;\n  }\n\n  const prevProps = useRef<T | null>(null);\n  const incrementReRender = useMetricsStore((state) => state.incrementReRender);\n\n  useEffect(() => {\n    if (prevProps.current) {\n      const changedProps: Record<string, { from: any; to: any }> = {};\n      for (const key of Object.keys(props)) {\n        if (prevProps.current[key] !== props[key]) {\n          changedProps[key] = {\n            from: prevProps.current[key],\n            to: props[key],\n          };\n        }\n      }\n      if (Object.keys(changedProps).length > 0) {\n        incrementReRender(componentName);\n        console.log(\n          `[useoptic] ${componentName} re-rendered. Changed props:`,\n          changedProps\n        );\n      }\n    }\n    prevProps.current = props;\n  });\n}\n\nlet renderTrackingSetup = false;\n\n/**\n * Sets up global render tracking (one-time log).\n */\nexport function setupRenderTracking() {\n  if (!renderTrackingSetup) {\n    renderTrackingSetup = true;\n    console.log('[useoptic] Re-render tracking enabled');\n  }\n}\n","export { InitOptic } from './core/initOptic';\nexport { default as Overlay } from './overlay/Overlay';\nexport { useRenderMonitor } from './metrics/reRenders';\n","export type InitOpticOptions = {\n  tti?: boolean;\n  startup?: boolean;\n  reRenders?: boolean;\n};\n\n/**\n * Initializes Optic performance logging systems based on options.\n * All features are enabled by default.\n */\nexport async function InitOptic(options: InitOpticOptions = {}) {\n  const {\n    tti = true,\n    startup = true,\n    reRenders = true,\n  } = options;\n\n  if (tti) {\n    const { trackTTI } = await import('../metrics/tti');\n    trackTTI();\n    console.log('[Optic] TTI tracking enabled');\n  }\n  if (startup) {\n    const { trackStartupTime } = await import('../metrics/startup');\n    trackStartupTime();\n    console.log('[Optic] Startup tracking enabled');\n  }\n  if (reRenders) {\n    const { setupRenderTracking } = await import('../metrics/reRenders');\n    setupRenderTracking();\n    console.log('[Optic] Re-render tracking enabled');\n  }\n}\n","import React, { useRef, useState } from 'react';\nimport { View, Text, StyleSheet, PanResponder, Animated, Dimensions } from 'react-native';\nimport { useMetricsStore } from '../store/metricsStore';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\nconst Overlay: React.FC = () => {\n  const tti = useMetricsStore((state) => state.tti);\n  const startupTime = useMetricsStore((state) => state.startupTime);\n  const reRenderCounts = useMetricsStore((state) => state.reRenderCounts);\n\n  const pan = useRef(new Animated.ValueXY()).current;\n  const [position, setPosition] = useState({ x: SCREEN_WIDTH - 200, y: 100 });\n\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderMove: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds\n        const boundedX = Math.max(0, Math.min(newX, SCREEN_WIDTH - 180));\n        const boundedY = Math.max(0, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        pan.setValue({ x: boundedX - position.x, y: boundedY - position.y });\n      },\n      onPanResponderRelease: (_, gesture) => {\n        const newX = position.x + gesture.dx;\n        const newY = position.y + gesture.dy;\n\n        // Keep within screen bounds\n        const boundedX = Math.max(0, Math.min(newX, SCREEN_WIDTH - 180));\n        const boundedY = Math.max(0, Math.min(newY, SCREEN_HEIGHT - 200));\n\n        setPosition({ x: boundedX, y: boundedY });\n        pan.setValue({ x: 0, y: 0 });\n      },\n    })\n  ).current;\n\n  const reRenderList = Object.entries(reRenderCounts).map(([name, count]: [string, number]) => (\n    <Text style={styles.metric} key={name}>\n      {name}: {count}\n    </Text>\n  ));\n\n  return (\n    <SafeAreaView style={styles.safeArea} pointerEvents=\"box-none\">\n      <Animated.View\n        style={[\n          styles.overlay,\n          {\n            transform: [\n              { translateX: pan.x },\n              { translateY: pan.y },\n            ],\n            left: position.x,\n            top: position.y,\n          },\n        ]}\n        {...panResponder.panHandlers}\n      >\n        <View style={styles.dragHandle} />\n        <Text style={styles.text}>[useoptic] Perf Overlay</Text>\n        <Text style={styles.metric}>TTI: {tti !== null ? `${tti}ms` : '...'} </Text>\n        <Text style={styles.metric}>Startup: {startupTime !== null ? `${startupTime}ms` : '...'} </Text>\n        <Text style={styles.metric}>Re-renders:</Text>\n        {reRenderList}\n      </Animated.View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'box-none',\n  },\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'rgba(20, 20, 20, 0.85)',\n    paddingVertical: 6,\n    paddingHorizontal: 14,\n    borderRadius: 8,\n    zIndex: 9999,\n    elevation: 20,\n    minWidth: 180,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n  },\n  dragHandle: {\n    width: 40,\n    height: 4,\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n    borderRadius: 2,\n    alignSelf: 'center',\n    marginBottom: 8,\n  },\n  text: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 14,\n    letterSpacing: 0.5,\n    marginBottom: 4,\n  },\n  metric: {\n    color: '#fff',\n    fontSize: 12,\n    marginBottom: 2,\n  },\n});\n\nexport default Overlay;\n"],"mappings":"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","names":["trackTTI","trackStartupTime","setupRenderTracking","React"]}