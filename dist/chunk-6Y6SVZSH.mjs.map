{"version":3,"sources":["../src/metrics/reRenders.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Hook to monitor and log prop changes for a component.\n * @param componentName Name of the component\n * @param props Component props\n */\nexport function useRenderMonitor<T extends Record<string, any>>(\n  componentName: string,\n  props: T\n) {\n  const prevProps = useRef<T | null>(null);\n\n  useEffect(() => {\n    if (prevProps.current) {\n      const changedProps: Record<string, { from: any; to: any }> = {};\n      for (const key of Object.keys(props)) {\n        if (prevProps.current[key] !== props[key]) {\n          changedProps[key] = {\n            from: prevProps.current[key],\n            to: props[key],\n          };\n        }\n      }\n      if (Object.keys(changedProps).length > 0) {\n        console.log(\n          `[useoptic] ${componentName} re-rendered. Changed props:`,\n          changedProps\n        );\n      }\n    }\n    prevProps.current = props;\n  });\n}\n\nlet renderTrackingSetup = false;\n\n/**\n * Sets up global render tracking (one-time log).\n */\nexport function setupRenderTracking() {\n  if (!renderTrackingSetup) {\n    renderTrackingSetup = true;\n    console.log('[useoptic] Re-render tracking enabled');\n  }\n}\n"],"mappings":";AAAA,SAAS,WAAW,cAAc;AAO3B,SAAS,iBACd,eACA,OACA;AACA,QAAM,YAAY,OAAiB,IAAI;AAEvC,YAAU,MAAM;AACd,QAAI,UAAU,SAAS;AACrB,YAAM,eAAuD,CAAC;AAC9D,iBAAW,OAAO,OAAO,KAAK,KAAK,GAAG;AACpC,YAAI,UAAU,QAAQ,GAAG,MAAM,MAAM,GAAG,GAAG;AACzC,uBAAa,GAAG,IAAI;AAAA,YAClB,MAAM,UAAU,QAAQ,GAAG;AAAA,YAC3B,IAAI,MAAM,GAAG;AAAA,UACf;AAAA,QACF;AAAA,MACF;AACA,UAAI,OAAO,KAAK,YAAY,EAAE,SAAS,GAAG;AACxC,gBAAQ;AAAA,UACN,cAAc,aAAa;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,cAAU,UAAU;AAAA,EACtB,CAAC;AACH;AAEA,IAAI,sBAAsB;AAKnB,SAAS,sBAAsB;AACpC,MAAI,CAAC,qBAAqB;AACxB,0BAAsB;AACtB,YAAQ,IAAI,uCAAuC;AAAA,EACrD;AACF;","names":[]}